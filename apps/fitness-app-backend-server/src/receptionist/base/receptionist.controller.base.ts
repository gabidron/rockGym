/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReceptionistService } from "../receptionist.service";
import { ReceptionistCreateInput } from "./ReceptionistCreateInput";
import { Receptionist } from "./Receptionist";
import { ReceptionistFindManyArgs } from "./ReceptionistFindManyArgs";
import { ReceptionistWhereUniqueInput } from "./ReceptionistWhereUniqueInput";
import { ReceptionistUpdateInput } from "./ReceptionistUpdateInput";

export class ReceptionistControllerBase {
  constructor(protected readonly service: ReceptionistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Receptionist })
  async createReceptionist(
    @common.Body() data: ReceptionistCreateInput
  ): Promise<Receptionist> {
    return await this.service.createReceptionist({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        username: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Receptionist] })
  @ApiNestedQuery(ReceptionistFindManyArgs)
  async receptionists(@common.Req() request: Request): Promise<Receptionist[]> {
    const args = plainToClass(ReceptionistFindManyArgs, request.query);
    return this.service.receptionists({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        username: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Receptionist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async receptionist(
    @common.Param() params: ReceptionistWhereUniqueInput
  ): Promise<Receptionist | null> {
    const result = await this.service.receptionist({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        username: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Receptionist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReceptionist(
    @common.Param() params: ReceptionistWhereUniqueInput,
    @common.Body() data: ReceptionistUpdateInput
  ): Promise<Receptionist | null> {
    try {
      return await this.service.updateReceptionist({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          username: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Receptionist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReceptionist(
    @common.Param() params: ReceptionistWhereUniqueInput
  ): Promise<Receptionist | null> {
    try {
      return await this.service.deleteReceptionist({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          username: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Receptionist } from "./Receptionist";
import { ReceptionistCountArgs } from "./ReceptionistCountArgs";
import { ReceptionistFindManyArgs } from "./ReceptionistFindManyArgs";
import { ReceptionistFindUniqueArgs } from "./ReceptionistFindUniqueArgs";
import { CreateReceptionistArgs } from "./CreateReceptionistArgs";
import { UpdateReceptionistArgs } from "./UpdateReceptionistArgs";
import { DeleteReceptionistArgs } from "./DeleteReceptionistArgs";
import { ReceptionistService } from "../receptionist.service";
@graphql.Resolver(() => Receptionist)
export class ReceptionistResolverBase {
  constructor(protected readonly service: ReceptionistService) {}

  async _receptionistsMeta(
    @graphql.Args() args: ReceptionistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Receptionist])
  async receptionists(
    @graphql.Args() args: ReceptionistFindManyArgs
  ): Promise<Receptionist[]> {
    return this.service.receptionists(args);
  }

  @graphql.Query(() => Receptionist, { nullable: true })
  async receptionist(
    @graphql.Args() args: ReceptionistFindUniqueArgs
  ): Promise<Receptionist | null> {
    const result = await this.service.receptionist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Receptionist)
  async createReceptionist(
    @graphql.Args() args: CreateReceptionistArgs
  ): Promise<Receptionist> {
    return await this.service.createReceptionist({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Receptionist)
  async updateReceptionist(
    @graphql.Args() args: UpdateReceptionistArgs
  ): Promise<Receptionist | null> {
    try {
      return await this.service.updateReceptionist({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Receptionist)
  async deleteReceptionist(
    @graphql.Args() args: DeleteReceptionistArgs
  ): Promise<Receptionist | null> {
    try {
      return await this.service.deleteReceptionist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
